[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CƠ SỞ LẬP TRÌNH",
    "section": "",
    "text": "Giới thiệu\nGiáo trình được biên soạn hoàn toàn dựa trên nhiều tài liệu của các đồng nghiệp. Giáo trình nên dùng với những cuốn sách giáo khoa hoàn chỉnh về ngôn ngữ lập trình C/C++. Giáo trình được chia thành 12 chương theo từng nội dung kiến thức, kèm theo Các đề thi mẫu. Mỗi chương gồm 2 phần: Phần lý thuyết: được tóm tắt ngắn gọn với đầy đủ ví dụ minh hoạ kèm theo. Phần bài tập: với nhiều bài tập được chia làm hai mức độ cơ bản và luyện tập nâng cao, bài tập có đánh dấu * là bài tập khó dành cho sinh viên luyện tập thêm. Phần tóm tắt: tóm tắt nội dung tóm và các thao tác mà sinh viên cần nắm hay những lưu ý của chương đó.",
    "crumbs": [
      "Giới thiệu"
    ]
  },
  {
    "objectID": "chapter-1-cpp.html",
    "href": "chapter-1-cpp.html",
    "title": "1  CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH",
    "section": "",
    "text": "1.1 KHÁI NIỆM LẬP TRÌNH",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH</span>"
    ]
  },
  {
    "objectID": "chapter-1-cpp.html#khái-niệm-lập-trình",
    "href": "chapter-1-cpp.html#khái-niệm-lập-trình",
    "title": "1  CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH",
    "section": "",
    "text": "CPU của máy tính được thiết kế để có thể thực hiện được các chương trình mã máy ) đã được hệ điều hành (HĐH) nạp vào RAM của máy tính.\nChương trình mã máy thường phải tương thích với từng họ máy cụ thể, bao gồm tập hợp các chỉ thị được viết bằng các lệnh CPU của họ máy đó, được lưu trên đĩa dưới dạng một tập tin mã thực thi của HĐH cụ thể\n\n\n\nQuy trình thực hiện\n\nBước 1: Người sử dụng ra lệnh thực hiện chạy chương trình.\nBước 2: HĐH nhận được lệnh sẽ thực hiện:\n\nTìm và nạp tập tin mã thực thi của chương trình (nằm trên đĩa) vào RAM của máy tính.\nBộ đếm lệnh của CPU (CPU program counter) được trỏ đến lệnh đầu tiên của chương trình hay còn gọi là ngõ vào chương trình\n\nBước 3: CPU thực hiện từng chỉ thị một trong RAM cho đến khi gặp lệnh kết thúc:\n\nChép lệnh mã máy hiện hành vào thanh ghi lệnh.\nTăng bộ đếm lệnh (để trỏ đến lệnh kế tiếp).\nThi hành lệnh mã máy.\n\nBước 4: Kết thúc thực hiện chương trình, HĐH chờ nhận lệnh mới.\n\n\n\nĐặc điểm\n\nMỗi chỉ thị của chương trình là một lệnh mã máy (một dãy các byte chỉ phù hợp với qui ước tập lệnh của một loại CPU nào đó)\nĐược cấu trúc hóa theo qui ước của HĐH.\nĐược chạy trên một họ CPU và HĐH cụ thể.\nNội dung rất khó hiểu đối với người dùng máy tính, chỉ có CPU thích hợp với hiểu rõ và thi hành được.\n\n\n\nNhận xét\n\nKhó có thể sản xuất ra phần mềm bằng cách viết trực tiếp các chương trình mã máy.\nNếu có làm được theo cách này thì\n\nGiá cả sẽ rất đắt do quá khó, tốn quá nhiều thời gian và công sức.\nKhả năng dùng lại rất giới hạn do không thể bán chongười dùng trên họ máy tính khác hay người dùng sử dụng hệ điều hành khác.\n\n\n\n\nNgôn ngữ lập trình - NNLT là ngôn ngữ được lập trình viên sử dụng để viết chương trình cho máy tính.\nKhi một chương trình được viết bằng một NNLT nào đó thì các chỉ thị, câu lệnh trong chương trình phải tuân theo các qui tắc, các luật do NNLT đó qui định.\nChương trình viết bằng ngôn ngữ lập trình được gọi là chương trình nguồn hay mã nguồn. Chương trình nguồn được dịch sang chương trình mã máy bằng cách chương trình dịch:\n\nTrình hợp dịch để dịch các chương trình hợp ngữ.\nTrình thông dịch và trình biên dịch để dịch các chương trình cấp cao.\n\n\n\n\nMột số ngôn ngữ lập trình thông dụng\n\nNgôn ngữ cấp thấp: Hợp ngữ (assembly language)\nNgôn ngữ cấp cao: C/C++, Java, C#, Pascal, Python, PHP, Ruby, Perl, Lisp\n\n\n\n\nChương trình là một dãy các chỉ thị điều khiển sự hoạt động của máy tính nhằm giải quyết một công việc nào đó.\nNgười viết chương trình hay còn gọi là lập trình viên hay thảo chương viên là những người tạo lập ra những chương trình máy tính.\n\n\n\nMột số chương trình\n\nNgôn ngữ assembly\n\n.model tiny\n.code\norg 100h\n    main  proc\n        mov    ah,9\n        mov    dx,offset hello_message\n        int    21h\n        retn\n        hello_message db 'Hello, world!$\\$$'\n    main endp\nend main\n\nNgôn ngữ C/C++\n\n#include &lt;stdio.h&gt;\nvoid main(void)\n{\n    pritnf(\"Hello world!\");\n}\n\nNgôn ngữ Java\n\npublic class Hello {\n    public static void main(String argv[])\n    {\n        System.out.print(\"Hello everybody!\");\n    }\n}\n\n\n\nĐặc điểm ngôn ngữ lập trình cấp thấp\n\nLà NNLT phụ thuộc vào từng họ máy cụ thể, vì vậy không có tính tương thích.\nDễ viết, đọc, sửa hơn chương trình mã máy.\nƯu điểm là tận dụng và khai thác được tính năng của mỗi họ máy cụ thể, nhờ vậy chương trình có thể chạy nhanh hơn.\n\n\n\nĐặc điểm ngôn ngữ lập trình cấp cao\n\nĐược đề xuất để khắc phục các hạn chế của NNLT cấp thấp.\nDễ dùng và dễ diễn đạt được các ý tưởng trừu tượng.\nCó tính tương thích cao (khi thay đổi dạng máy tính thì chỉ cần sửa chương trình rất ít hoặc thậm chí không cần sửa mà vẫn đảm bảo chạy đúng).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH</span>"
    ]
  },
  {
    "objectID": "chapter-1-cpp.html#công-nghệ-lập-trình-truyền-thống",
    "href": "chapter-1-cpp.html#công-nghệ-lập-trình-truyền-thống",
    "title": "1  CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH",
    "section": "1.2 CÔNG NGHỆ LẬP TRÌNH TRUYỀN THỐNG",
    "text": "1.2 CÔNG NGHỆ LẬP TRÌNH TRUYỀN THỐNG\nĐối với các NNLT cấp cao truyền thống (trước thế hệ của C++, Java và C#), quá trình viết, dịch và chạy chương trình gồm các công đoạn như sau:\n\nB1. Soạn chương trình nguồn và lưu lên đĩa.\nB2. Dịch chương trình nguồn nhờ trình biên dịch.\nB3. Nối kết các tập tin mã trung gian tạo ra ở B2.\nB4. Chạy chương trình ngôn ngữ máy tạo ra ở B3.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH</span>"
    ]
  },
  {
    "objectID": "chapter-1-cpp.html#công-nghệ-lập-trình-hiện-đại",
    "href": "chapter-1-cpp.html#công-nghệ-lập-trình-hiện-đại",
    "title": "1  CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH",
    "section": "1.3 CÔNG NGHỆ LẬP TRÌNH HIỆN ĐẠI",
    "text": "1.3 CÔNG NGHỆ LẬP TRÌNH HIỆN ĐẠI\n\nHạn chế của các chương trình cấp cao truyền thống là trình biên dịch của chúng phát sinh trực tiếp mã thực thi phụ thuộc vào mã máy tính của một họ máy tính và hệ điều hành cụ thể nên không thể mang đi sử dụng ở các hệ điều hành khác.\nNNLT hiện đại như Java hay C# trình biên dịch không dịch trực tiếp mã nguồn thành mã thực thi mà được thiết kế để có thể dịch thành mã thực thi trừu tượng độc lập máy và hệ điều hành.\nDo máy tính thật không thể hiểu được mã trừu tượng nên những chương trình dạng mã thực thi trừu tượng chỉ chạy được khi có sẵn máy ảo hỗ trợ cho việc thi hành loại mã thực thi đó.\nTrong các năm gần đây, các ứng dụng chạy trên web phát triển rất mạnh.\n\nChạy trên internet thông qua một trình duyệt web.\nĐược viết bằng các ngôn ngữ như Python, PHP, ASP.NET, JSP, Java Script, VB Script… có tính tương thích cao, hoạt động trên bất kỳ máy tính nào có internet\n\n\n\nCông cụ và môi trường lập trình\nToàn bộ qui trình biên dịch được thực một cách dễ dàng và thuận tiện nhờ vào công cụ gọi là môi trường phát triển phần mềm - IDE\n\nSoạn thảo chương trình.\nQuản lý hệ thống tập tin mã nguồn.\nQuản lý hệ thống các phiên bản của mã nguồn.\nKiểm tra lỗi cú pháp (syntax error), biên dịch (compile), liên kết chương trình (link).\nChạy từng dòng lệnh (debug) để tìm lỗi.\n\n\nMột số IDE thông dụng\n\nEclipse: hỗ trợ nhiều ngôn ngữ lập trình.\nVisual Studio, Visual Studio Code: hỗ trợ nghiều ngôn ngữ lập trình",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH</span>"
    ]
  },
  {
    "objectID": "chapter-1-cpp.html#thuật-toán",
    "href": "chapter-1-cpp.html#thuật-toán",
    "title": "1  CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH",
    "section": "1.4 THUẬT TOÁN",
    "text": "1.4 THUẬT TOÁN\n\nCác bước thiết kế chương trình\n\nXác định bài toán\nPhân tích bài toán\nThiết kế thuật toán\nCài đặt chương trình\nKiểm thử chương trình\n\n\nThuật toán là tập hợp hữu hạn các chỉ thị được định nghĩa rõ ràng nhằm giải quyết một vấn đề cụ thể nào đó.\n\nMột thuật toán phải có các tính chất sau\n\nTính chính xác: quá trình tính toán hay các thao tác máy tính thực hiện là chính xác.\nTính rõ ràng: các câu lệnh minh bạch được sắp xếp theo thứ tự nhất định.\nTính khách quan: được viết bởi nhiều người trên máy tính nhưng kết quả phải như nhau.\nTính phổ dụng: có thể áp dụng cho một lớp các bài toán có đầu vào tương tự nhau.\nTính kết thúc: hữu hạn các bước tính toán\n\n\n\nTrình bày thuật toán như thế nào?\n\nTrình bày bằng ngôn ngữ tự nhiên\nTrình bày bằng mã giả\nTrình bày bằng lưu đồ\n\n\nHãy trình bày cách làm món sữa dâu bằng ngôn ngữ tự nhiên\nCách 1\n\nLấy một ít sữa.\nĐổ nước ép dâu vào.\nTrộn hỗn hợp này và làm lạnh.\n\nCách 2\n\nRót một ly sữa vào máy xay\nĐổ thêm vào một ít nước dâu ép\nĐóng nắm máy xay\nMở điện và bắt đầu trộn\nDừng máy trộn lại\nNếu đã trộn đều thì tắt máy, ngược lại thì trộn tiếp\nKhi đã trộn xong, rót hỗn hợp vào tô và đặt vào tủ lạnh\nĐể lạnh một lúc rồi lấy ra dùng\n\n\n\nHãy trình bày cách sắp xếp một dãy số L theo thứ tự tăng dần bằng ngôn ngữ mã giả\nMERGESORT(L)\nif SIZE(L)&gt; 1\n  SPLIT(L, L_{1}, L_{2}) (tách dãy L thành L_{1} và L_{2})\n  MERGESORT(L_{1}) (sắp xếp dãy L_{1})\n  MERGESORT(L_{2}) (sắp xếp dãy L_{2})\n  MERGE(L_{1}, L_{2}, L) (trộn dãy L_{1} và L_{2} thành L)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>CÁC KHÁI NIỆM CƠ BẢN VỀ LẬP TRÌNH</span>"
    ]
  },
  {
    "objectID": "chapter-2-cpp.html",
    "href": "chapter-2-cpp.html",
    "title": "2  LƯU ĐỒ THUẬT TOÁN",
    "section": "",
    "text": "2.1 LÝ THUYẾT\nChương này sẽ trình bày các ký hiệu biểu diễn lưu đồ thuật toán, cách biểu diễn các cấu trúc điều khiển rẽ nhánh, cấu trúc lặp và các kỹ thuật liên quan đến lưu đồ thuật toán.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>LƯU ĐỒ THUẬT TOÁN</span>"
    ]
  },
  {
    "objectID": "chapter-2-cpp.html#lý-thuyết",
    "href": "chapter-2-cpp.html#lý-thuyết",
    "title": "2  LƯU ĐỒ THUẬT TOÁN",
    "section": "",
    "text": "Khái niệm\nLưu đồ thuật toán là công cụ đồ thị dùng để biểu diễn thuật toán, việc mô tả nhập dữ liệu và xuất dữ liệu và xử lý dữ liệu thông qua các ký hiệu hình học.\n\n\nPhần mềm công cụ\nCác công cụ để vẽ lưu đồ như\n\nDrawio, Visio\nFlowchart có thể thực thi\n\n\n\nCác ký hiệu\n\n\n\nLệnh\nKý hiệu\nLệnh\nKý hiệu\n\n\n\n\nAssignment\n\nFor\n\n\n\nCall\n\nIf\n\n\n\nComment\n\nInput\n\n\n\nDeclare\n\nOutput\n\n\n\nDo\n\nWhile\n\n\n\n\n\n\nPhương pháp vẽ và thực thi\n\nVẽ từ trên xuống\nChạy bắt đầu từ Main và kết thúc tại End\nĐi theo hướng mũi tên\n\n\n\nCác cấu trúc điều khiển cơ bản\n\nCấu trúc tuần tự\nTuần tự thực thi tiến trình. Mỗi lệnh được thực thi theo một chuỗi từ trên xuống, xong lệnh này rồi chuyển xuống lệnh kế tiếp.\n\nNhập vào một số nguyên a và xuất ra màn hình với giá trị tăng lên 1\n\n\n\nCấu trúc rẽ nhánh\nĐiểm quyết định cho phép chọn một trong hai trường hợp đúng hay sai\n\nNhập vào số nguyên n. Kiểm tra nếu n&gt;0 tăng n lên 1 đơn vị\n\n\n\nCấu trúc lặp\nThực hiện liên tục 1 lệnh hay tập lệnh với số lần lặp dựa vào điều kiện. Lặp sẽ kết thúc khi điều kiện được thỏa.\n\nNhập vào số nguyên n. Xuất ra màn hình từ 1 đến n.\n\n\n\nCác ví dụ thực hành\n\nGiải và biện luận phương trình: ax+b=0.\nTính tổng: S(n)=1+2+3+\\ldots+n với n&gt;0\nTính tổng: S(n)=\\frac{1}{2}+\\frac{2}{3}+\\frac{3}{4}+\\ldots+\\frac{2n+1}{2n+2} với n&gt;0\nTính tổng: S(n)=1-2+3-\\ldots+(-1)^{n+1}n với n&gt;0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>LƯU ĐỒ THUẬT TOÁN</span>"
    ]
  },
  {
    "objectID": "chapter-2-cpp.html#bài-tập",
    "href": "chapter-2-cpp.html#bài-tập",
    "title": "2  LƯU ĐỒ THUẬT TOÁN",
    "section": "2.2 BÀI TẬP",
    "text": "2.2 BÀI TẬP\n\nBài tập cơ bản\n\nNhập vào hai số x,y. Xuất ra màn hình tổng, hiệu, tích, thương của hai số trên.\nNhập vào số nguyên n, kiểm tra xem n chẵn hay lẻ và xuất ra màn hình.\nNhập vào ba cạnh a,b,c của tam giác. Xuất ra màn hình tam giác đó thuộc loại tam giác gì? (thường, cân, vuông, đều hay vuông cân).\nNhập vào số nguyên n. Xuất n ra màn hình (nếu n chẵn thì gấp đôi giá trị).\nNhập vào số nguyên n. Nếu n&gt;5 thì tăng n lên 2 đơn vị và trả về giá trị n, ngược lại trả về giá trị 0.\nTính n!, với n\\geq0\nTính P(n)=1.3.5...(2n+1), với n\\geq0\nTính S(n)=1+3+5+...+(2n+1), với n\\geq0\nTính S(n)=1-2+3-4+...+(-1)^{n+1}n, với n&gt;0\nTính S(n)=1+1.2+1.2.3+...+1.2.3...n, với n&gt;0\nTính S(n)=1^{2}+2^{2}+3^{2}+...+n^{2}, với n&gt;0\nTính S(n)=1+\\frac{1}{2}+\\frac{1}{3}+...+\\frac{1}{n} với n&gt;0\n(*) Tính S(n)=1+\\frac{1}{1+2}+\\frac{1}{1+2+3}+...+\\frac{1}{1+2+3+...+n} với n&gt;0\nTính P(x,y)=x^{y}\nTính S(n)=1+(1+2)+(1+2+3)+...+(1+2+3+...+n) với n&gt;0\nCho số nguyên n. Tính trị tuyệt đối của n.\nCho số nguyên dương n gồm k chữ số. Tìm chữ số có giá trị lớn nhất.\nĐếm số lượng ước số chẵn của số nguyên dương n.\nIn ra chữ số đầu tiên của số nguyên dương n gồm k chữ số.\nCho 2 số nguyên dương a,b. Tìm USCLN của a và b.\nCho 2 số nguyên dương a,b. Tìm BSCNN của a và b.\nCho số nguyên dương x. Kiểm tra xem x có phải là số nguyên tố không?\nCho số nguyên dương x. Kiểm tra x có phải là số chính phương không?\nCho số nguyên dương x. Kiểm tra xem x có phải là số hoàn thiện không?\n\n\n\nBài tập luyện tập và nâng cao\n\nTính S(n)=1+2^{2}+3^{3}+...+n^{n}, với n&gt;0\nTính S(n)=\\frac{1}{2}+\\frac{2}{3}+...+\\frac{n}{n+1} với n&gt;0\nTính S(n)=1+\\frac{1}{2!}+\\frac{1}{3!}+\\ldots.+\\frac{1}{n!} với n&gt;0\nTính S(n)=1+\\frac{1+2}{2!}+\\frac{1+2+3}{3!}+\\ldots.+\\frac{1+2+3+...+n}{n!} với n&gt;0\nGiải và biện luận phương trình bậc hai ax^{2}+bx+c=0\nGiải và biện luận phương trình trùng phương bậc bốn ax^{4}+bx^{2}+c=0\n(*) Tính S(n)=\\sqrt{n+\\sqrt{n-1+\\sqrt{n-2+...+\\sqrt{1}}}} với n&gt;0\n(**) Tính S(n)=\\sqrt{1+\\sqrt{2+\\sqrt{3+...+\\sqrt{n}}}} với n&gt;0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>LƯU ĐỒ THUẬT TOÁN</span>"
    ]
  },
  {
    "objectID": "chapter-2-cpp.html#tóm-tắt",
    "href": "chapter-2-cpp.html#tóm-tắt",
    "title": "2  LƯU ĐỒ THUẬT TOÁN",
    "section": "2.3 TÓM TẮT",
    "text": "2.3 TÓM TẮT\nLưu đồ thuật toán rất là một công cụ hữu ích trong việc mô tả cách giải quyết của một bài toán. Việc mô tả này rất trực quan thông qua các ký hiệu hình học, đây là giai đoạn đầu tiên trước khi bắt tay vào lập trình trên một ngôn ngữ lập trình cụ thể. Khi xây dựng lưu đồ thuật toán, chúng ta cần chú ý một vài điểm sau: Một lưu đồ phải có điểm bắt đầu và điểm kết thúc. Phải có dữ liệu vào, dữ liệu ra sau khi xử lý tính toán. Tại mỗi vị trí quyết định lựa chọn rẽ nhánh phải ghi rõ điều kiện đúng hoặc sai thì đi theo nhánh nào.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>LƯU ĐỒ THUẬT TOÁN</span>"
    ]
  },
  {
    "objectID": "chapter-3-cpp.html",
    "href": "chapter-3-cpp.html",
    "title": "3  KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN",
    "section": "",
    "text": "3.1 LÝ THUYẾT\nChương này trình bày các kiểu dữ liệu cơ bản và các phép toán tương ứng trong ngôn ngữ C++, các cấu trúc rẽ nhánh, lặp. Mô tả cách hoạt động và hướng dẫn chạy từng bước chương trình.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN</span>"
    ]
  },
  {
    "objectID": "chapter-3-cpp.html#lý-thuyết",
    "href": "chapter-3-cpp.html#lý-thuyết",
    "title": "3  KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN",
    "section": "",
    "text": "Cấu trúc một chương trình C++ đơn giản\n\nKhai báo thư viện\nKhai báo biến toàn cục\nChương trình chính (main)\n\n\nMột chương trình đơn giản\n// Khai báo thư viện\n#include &lt;iostream&gt;\nusing namespace std;\n\n// Khai báo biến toàn cục\nint a, b;\n\n// Chương trình chính\nint main()\n{\n    cout &lt;&lt; \"Hello world!\";\n    return 0;\n}\n\n\n\nCác kiểu dữ liệu cơ bản trong C++\n\nKiểu số nguyên\n\n\n\nTên kiểu\nkích thước (byte)\n\n\n\n\nchar\n1\n\n\nunsigned char\n1\n\n\nint\n4\n\n\nunsigned int\n4\n\n\nlong\n8\n\n\nunsigned long\n8\n\n\n\n\n\nKiểu số thực\n\n\n\nTên kiểu\nkích thước (byte)\n\n\n\n\nfloat\n4\n\n\ndouble\n8\n\n\n\n\n\nKiểu ký tự\n\n\n\nTên kiểu\nkích thước (byte)\n\n\n\n\nchar\n1\n\n\nunsigned char\n1\n\n\n\n\n\nKiểu luận lý\n\n\n\nTên kiểu\nkích thước (byte)\n\n\n\n\nbool\n1\n\n\n\n\n\n\nCác phép toán\n\nPhép toán số học\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nCộng\n+\na+b\n\n\nTrừ\n-\na-b\n\n\nNhân\n*\na*b\n\n\nChia\n/\na/b\n\n\nDư\n%\na%b\n\n\n\n\n\nphép toán so sánh\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nLớn hơn\n&gt;\na&gt;b\n\n\nNhỏ hơn\n&lt;\na&lt;b\n\n\nBằng\n==\na==b\n\n\nKhác\n!=\na!=b\n\n\nLớn hơn hoặc bằng\n&gt;=\na&gt;=b\n\n\nNhỏ hơn hoặc bằng\n&lt;=\na&lt;=b\n\n\n\n\n\nphép toán logic\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nphủ định\n!\n!a\n\n\nvà\n&&\na&&b\n\n\nhay\n||\na||b\n\n\n\n\n\nphép toán thao tác trên bit\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nNOT\n~\n~a\n\n\nAND\n&\na&b\n\n\nOR\n|\na|b\n\n\nXOR\n^\na^b\n\n\nSHIFT LEFT\n&lt;&lt;\na&lt;&lt;b\n\n\nSHIFT RIGHT\n&gt;&gt;\na&gt;&gt;b\n\n\n\n\n\nphép toán tăng giảm\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nTăng biến một đơn vị\n++\na++ hoặc ++a\n\n\nGiảm biến một đơn vị\n--\na-- hoặc --a\n\n\n\n\n\nphép toán gán và gán mở rộng\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nGán biến một giá trị\n=\na=b\n\n\n\n\ntoán tử điều kiện\n\n\n\nPhép toán\nC++\nVí dụ\n\n\n\n\nđiều kiện\n?:\na?b:c\n\n\n\n\n\n\nđộ ưu tiên và kết hợp của các toán tử\n\n\n\nLoại\nToán tử\nKết hợp\n\n\n\n\nPostfix\n() [] -&gt;. ++ --\ntrái sang phải\n\n\nUnary\n+ - ! ~ ++ -- (type)* & sizeof\nphải sang trái\n\n\nMultiplicative\n* / %\ntrái sang phải\n\n\nAdditive\n+ -\ntrái sang phải\n\n\nShift\n&lt;&lt; &gt;&gt;\ntrái sang phải\n\n\nRelational\n&lt; &lt;= &gt; &gt;=\ntrái sang phải\n\n\nEquality\n== !=\ntrái sang phải\n\n\nBitwise AND\n&\ntrái sang phải\n\n\nBitwise XOR\n^\ntrái sang phải\n\n\nBitwise OR\n|\ntrái sang phải\n\n\nLogical AND\n&&\ntrái sang phải\n\n\nLogical OR\n||\ntrái sang phải\n\n\nConditional\n?:\nphải sang trái\n\n\nAssignment\n= += -= *= /= %= &gt;&gt;= &lt;&lt;= &= ^= |=\nphải sang trái\n\n\nComma\n,\ntrái sang phải\n\n\n\n\n\n\nCác hàm thư viện cơ bản\n\nThư viện xuất nhập chuẩn &lt;iostream&gt;\n\n\nThư viện toán học &lt;cmath&gt;\n\n\n\nTên hàm\nÝ nghĩa\n\n\n\n\nabs(x)\n|a|\n\n\nsin(x)\nsin(x)\n\n\ncos(x)\ncos(x)\n\n\npow(x,y)\nx^{y}\n\n\nsqrt(x)\n\\sqrt{x}\n\n\nlog(x)\nlog(x)\n\n\nexp(x)\ne^{x}\n\n\n\n\n\n\nCấu trúc tuần tự\n\n⟨lệnh 1⟩;\n⟨lệnh 2⟩;\n...\n⟨lệnh n⟩;\nCác câu lệnh được thực hiện từ trên xuống, bắt đầu từ ⟨lệnh 1⟩, ⟨lệnh 2⟩ và cuối cùng là ⟨lệnh n⟩\n\n\nTính tổng hai số nguyên\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int a, b, s;\n    cout &lt;&lt; \"Nhap a va b = \";\n    cin &gt;&gt; a &gt;&gt; b;\n    s = a + b;\n    cout &lt;&lt; \"tong la = \" &lt;&lt; s;\n    return 0;\n}\n\n\n\nCấu trúc rẽ nhánh\n\nCâu lệnh if\n\nif (⟨biểu thức điều kiện⟩)\n{\n    ⟨khối lệnh⟩\n}\nNếu ⟨biểu thức điều kiện⟩ đúng thì thực hiện ⟨khối lệnh⟩. Lưu ý, ⟨biểu thức điều kiện⟩ phải được đặt trong cặp ngoặc\n\n\nKiểm tra một số có lớn hơn 6\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    float number;\n    cout &lt;&lt; \"Nhap mot so trong khoang tu 1 den 10 = \";\n    cin &gt;&gt; number;\n    if (number &gt; 6) {\n        cout &lt;&lt; \"So ban nhap lon hon 6.\" &lt;&lt; endl;\n    }\n    cout &lt;&lt; number &lt;&lt; \" la so ban nhap.\";\n    return 0;\n}\n\n\n\nCâu lệnh if … else\n\nif (⟨biểu thức điều kiện⟩)\n{\n    ⟨khối lệnh 1⟩\n}\nelse\n{\n    ⟨khối lệnh 2⟩\n}\nNếu ⟨biểu thức điều kiện⟩ cho kết quả đúng thì thực hiện ⟨khối lệnh 1⟩, ngược lại thì cho thực hiện ⟨khối lệnh 2⟩.\n\n\nGiải và biện luận phương trình ax+b=0\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    float a, b;\n    cout &lt;&lt; \"Nhap vao a: \";\n    cin &gt;&gt; a;\n    cout &lt;&lt; \"Nhap vao b: \";\n    cin &gt;&gt; b;\n    if (a == 0) {\n        if (b == 0) {\n            cout &lt;&lt; \"Phuong trinh vo so nghiem\";\n        }\n        else {\n            cout &lt;&lt; \"Phuong trinh vo nghiem\";\n        }\n    }\n    else {\n        cout &lt;&lt; \"Nghiem phuong trinh x = \" &lt;&lt; -b / a;\n    }\n    return 0;\n}\n\n\n\nCâu lệnh switch\n\nswitch (⟨biểu thức số⟩)\n{\n    case ⟨n_1⟩: ⟨các câu lệnh 1⟩; break;\n    case ⟨n_2⟩: ⟨các câu lệnh 2⟩; break;\n    ...\n    case ⟨n_k⟩: ⟨các câu lệnh k⟩; break;\n    [default: ⟨các câu lệnh k+1⟩;]\n}\n\nKhi giá trị biểu thức bằng n_{i} thì thực hiện câu lệnh sau case ⟨n_i⟩.\nKhi giá trị biểu thức không thỏa tất cả các n_{i} thì thực hiện câu lệnh sau default nếu có, hoặc thoát khỏi câu lệnh switch.\nKhi chương trình đã thực hiện xong câu lệnh của case ⟨n_i⟩ nào đó thì nó sẽ thực hiện luôn các lệnh thuộc case bên dưới nó mà không xét lại điều kiện (do các n_i được xem như các nhãn) Vì vậy, để chương trình thoát khỏi lệnh switch sau khi thực hiện xong một trường hợp, ta dùng lệnh break.\n\n\n\nTạo thực đơn và cho phép chọn thực đơn bằng số nhập từ bàn phím.\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int chon;\n    cout &lt;&lt; \"Thuc Don\" &lt;&lt; endl;\n    cout &lt;&lt; \"1. Lau thai!\" &lt;&lt; endl;\n    cout &lt;&lt; \"2. Nuoc ngot!\" &lt;&lt; endl;\n    cout &lt;&lt; \"3. Ca loc hap bau!\" &lt;&lt; endl;\n    cout &lt;&lt; \"4. Chuot dong!\" &lt;&lt; endl;\n    cout &lt;&lt; \"Xin moi ban chon mon an: \";\n    cin &gt;&gt; chon;\n    switch (chon)\n    {\n        case 1: cout &lt;&lt; endl &lt;&lt; \"Ban chon lau thai!\"; break;\n        case 2: cout &lt;&lt; endl &lt;&lt; \"Ban chon nuoc ngot!\"; break;\n        case 3: cout &lt;&lt; endl &lt;&lt; \"Ban chon ca loc hap bau!\"; break;\n        case 4: cout &lt;&lt; endl &lt;&lt; \"Ban chon chuot dong!\"; break;\n        default: cout &lt;&lt; endl &lt;&lt; \"Ban chon khong dung!\"; break;\n    }\n    return 0;\n}\n\n\n\n\nCấu trúc lặp\n\nCâu lệnh for\n\nfor (⟨biểu thức 1⟩; ⟨biểu thức 2⟩; ⟨biểu thức 3⟩)\n{\n    ⟨các câu lệnh⟩\n}\nHoạt động của câu lệnh for như sau:\n\nBước 1: Khởi gán cho ⟨biểu thức 1⟩\nBước 2: Kiểm tra điều kiện của ⟨biểu thức 2⟩\n\nNếu ⟨biểu thức 2⟩ đúng thì cho thực hiện ⟨các câu lệnh⟩ và thực hiện ⟨biểu thức 3⟩ rồi quay trở lại bước 2.\nNgược lại thì thoát khỏi lặp.\n\nBất kỳ biểu thức nào trong 3 biểu thức nói trên đều có thể vắng nhưng phải giữ dấu chấm phẩy (;)\n\n\n\nIn ra màn hình bảng mã ASCII từ ký tự số 32 đến 255.\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    for (int i = 32; i &lt;= 255; i++) {\n        cout &lt;&lt; \"Ma ASCII cua \" &lt;&lt; (char)i &lt;&lt; \": \" &lt;&lt; i &lt;&lt; \"\\t\";\n    }\n    return 0;\n}\n\n\n\nCâu lệnh while\n\nwhile (⟨biểu thức điều kiện⟩)\n{\n    ⟨các câu lệnh⟩\n}\nNếu ⟨biểu thức điều kiện⟩ đúng thì thực hiện ⟨các câu lệnh⟩ và lặp điều này cho đến khi nào ⟨biểu thức điều kiện⟩ sai thì kết thúc\n\n\nIn ra các chữ số của số nguyên n\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int n, chuso;\n    cout &lt;&lt; \"Nhap vao n = \";\n    cin &gt;&gt; n;\n    while (n &gt; 0)\n    {\n        chuso = n % 10;\n        cout &lt;&lt; chuso &lt;&lt; \" \";\n        n = n / 10;\n    }\n    return 0;\n}\n\n\n\nCâu lệnh do … while\n\ndo {\n    ⟨các câu lệnh⟩\n} while (⟨biểu thức điều kiện⟩);\nThực hiện khối lệnh cho đến khi ⟨biểu thức điều kiện⟩ có giá trị sai.\n\n\nNhập ký tự từ bàn phím hiển thị lên màn hình mã ASCII của ký tự đó, thực hiện đến khi nhấn phím ESC (Mã ASCII của phím ESC là 27).\n#include &lt;iostream&gt;\n#include &lt;conio.h&gt; // Lưu ý: conio.h không phải là thư viện chuẩn của C++\nusing namespace std;\n\nint main()\n{\n    int ma;\n    cout &lt;&lt; \"Nhan mot phim bat ky (Nhan ESC de thoat):\" &lt;&lt; endl;\n    do {\n        ma = getch();\n        if (ma != 27) {\n            cout &lt;&lt; \"Ma ASCII \" &lt;&lt; (char)ma &lt;&lt; \": \" &lt;&lt; ma &lt;&lt; \"\\t\";\n        }\n    } while (ma != 27);\n    return 0;\n}\n\n\nLệnh lặp while kiểm tra điều kiện trước khi thực hiện lặp, còn lệnh lặp do...while thực hiện lệnh lặp rồi mới kiểm tra điều kiện. Do đó vòng lặp do...while thực hiện ⟨các câu lệnh⟩ ít nhất một lần.\n\n\n\nCâu lệnh break và continue\nLệnh break dùng để kết thúc vòng lặp trực tiếp chứa nó\n\nCho phép người dùng nhập liên tục giá trị n cho đến khi nhập số âm thì dừng lại\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int n;\n    while (true)\n    {\n        cout &lt;&lt; \"Nhap n = \";\n        cin &gt;&gt; n;\n        if (n &lt; 0) {\n            break;\n        }\n    }\n    return 0;\n}\n\nLệnh continue dùng để bỏ qua một lần lặp.\n\nIn ra màn hình giá trị từ 1 đến 25 trừ đi số 14 và số 18.\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    for (int i = 1; i &lt;= 25; i++)\n    {\n        if (i == 14 || i == 18) {\n            continue;\n        }\n        cout &lt;&lt; i &lt;&lt; \"\\t\";\n    }\n    return 0;\n}\n\n\n\n\nCấu trúc nhảy\n\n⟨nhãn⟩:\n...\ngoto ⟨nhãn⟩;\n...\ncon trỏ lệnh sẽ được nhảy đến vị trị của ⟨nhãn⟩\n\n\nKiểm tra một số nguyên là số dương, âm hay không?\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int n;\n    cout &lt;&lt; \"Nhap vao so nguyen = \";\n    cin &gt;&gt; n;\n    if (n &gt; 0) goto nhan1;\n    if (n &lt; 0) goto nhan2;\n    if (n == 0) goto nhan3;\nnhan1:\n    cout &lt;&lt; \"so duong\";\n    goto nhan;\nnhan2:\n    cout &lt;&lt; \"so am\";\n    goto nhan;\nnhan3:\n    cout &lt;&lt; \"so khong\";\nnhan:\n    return 0;\n}\n\n\n\nThực thi chương trình\n\nXác định các biến trong chương trình.\nGiá trị ban đầu của mỗi biến.\nThực hiện chạy chương trình theo đúng trình tự đã được viết\n\n\nCho biết kết quả của đoạn chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int i, a = 4;\n    for (i = 0; i &lt; a; i++) {\n        cout &lt;&lt; i &lt;&lt; endl;\n    }\n    return 0;\n}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN</span>"
    ]
  },
  {
    "objectID": "chapter-3-cpp.html#bài-tập",
    "href": "chapter-3-cpp.html#bài-tập",
    "title": "3  KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN",
    "section": "3.2 BÀI TẬP",
    "text": "3.2 BÀI TẬP\n\nBài tập cơ bản\n\n\nBiến, biểu thức và toán tử\n\nChuỗi ký tự nào sau đây không thể là tên biến được?\n\n\n\n\nBASICSALARY\n_basic\nbasic-hra\n\n\n#MEAN\ngroup.\n422\n\n\npopulation in 2006\nover time\nmindovermatter\n\n\nFLOAT\nhELLO\nqueue.\n\n\nteam'svictory\nPlot # 3\n2015_DDay\n\n\nnhiệt\nvan_toc\nlai suat\n\n\n\n\nChỉ ra biểu thức C/C++ lỗi (nếu có)\n\nint = 314.562 * 150;\nname = 'Ajay';\nvarchar = '3';\n3.14 * r * r * h = vol_of_cyl;\nk = ( a * b ) ( c + ( 2.5a + b ) ( d + e );\nm_inst = rate of interest * amount in rs;\nsi = principal * rateofinterest * numberofyears / 100;\narea = 3.14 * r ** 2;\nvolume = 3.14 * r ^ 2 * h;\nk = ( (a * b ) + c ) ( 2.5 * a + b );\na = b = 3 = 4;\ncount = count + 1;\ndate = '2 Mar 04';\n\nXác định thứ tự thực hiện các phép toán và tính giá trị của biểu thức\n\ng = big / 2 + big * 4 / big - big + abc / 3; (abc = 2.5, big = 2, giả sử g có kiểu float)\non = ink * act / 2 + 3 / 2 * act + 2 + tig; (ink = 4, act = 1, tig = 3.2, giả sử on có kiểu int)\ns = qui * add / 4 - 6 / 2 + 2 / 3 * 6 / god; (qui = 4, add = 2, god = 2, giả sử s có kiểu int)\ns = 1 / 3 * a / 4 - 6 / 2 + 2 / 3 * 6 / g; (a = 4, g = 3, giả sử s có kiểu int)\n\nXác định toán hạng cho các phép toán trong biểu thức\n\ng = 10 / 5 / 2 / 1;\nb = 3 / 2 + 5 * 4 / 3;\na = b = c = 3 + 4;\n\nChuyển các biểu thức toán sau sang ngôn ngữ C/C++ A=\\frac{\\frac{8.8(a+b)2}{c}-0.5+\\frac{2a}{q+r}}{\\frac{a+b}{m}} B=\\frac{-b+\\sqrt{b^{2}-4ac}}{2a} C=\\frac{2v+6.22(c+d)}{g+v} D=\\frac{\\frac{7.7b(xy+a)}{c}-0.8+2b}{\\frac{x+a}{y}}\n\n\n\nCấu trúc rẽ nhánh\n\nCho biết kết quả của đoạn chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 9, b = 6;\n    a++;\n    a = a + b--;\n    a = a + (--b);\n    if (a % 2 == 0) {\n        cout &lt;&lt; \"Gia tri cua a la chan\";\n    }\n    cout &lt;&lt; \"Tong cua a va b la: \" &lt;&lt; a + b;\n    return 0;\n}\nCho biết kết quả của đoạn chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 7, b = 8;\n    a++;\n    a = a + (b--);\n    --b;\n    a--;\n    a = (--a) + (--b);\n    if (a % 2 != 0) {\n        cout &lt;&lt; endl &lt;&lt; \"a la so le\";\n    }\n    else {\n        cout &lt;&lt; endl &lt;&lt; \"a la so chan\";\n    }\n    cout &lt;&lt; endl &lt;&lt; \"a = \" &lt;&lt; a;\n    return 0;\n}\nCho biết kết quả của đoạn chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int x = 5, y;\n    y = x++ + 5;\n    cout &lt;&lt; \"x=\" &lt;&lt; x &lt;&lt; \", y=\" &lt;&lt; y &lt;&lt; endl;\n    y *= 6;\n    x = y % 7;\n    cout &lt;&lt; \"x=\" &lt;&lt; x &lt;&lt; \",y=\" &lt;&lt; y &lt;&lt; \",y/x=\" &lt;&lt; y / x;\n    return 0;\n}\nNhập vào hai số nguyên a,b. In ra màn hình giá trị lớn nhất.\nCho ba số a,b,c đọc vào từ bàn phím. Hãy tìm giá trị lớn nhất của ba số trên và in ra kết quả.\nCho ba số a,b,c đọc vào từ bàn phím. Hãy in ra màn hình theo thứ tự tăng dần các số. (Chỉ được dùng thêm hai biến phụ).\nViết chương trình nhập vào một số nguyên n gồm ba chữ số. Xuất ra màn hình chữ số lớn nhất ở vị trí nào? Ví dụ: n=291. Chữ số lớn nhất nằm ở hàng chục là 9.\nViết chương trình nhập vào số nguyên n gồm ba chữ số. Xuất ra màn hình theo thứ tự tăng dần của các chữ số. Ví dụ: n=291. Xuất ra 129.\nNhập vào ngày, tháng, năm. Kiểm tra xem ngày, tháng, năm đó có hợp lệ hay không? In kết quả ra màn hình.\nNhập vào giờ, phút, giây. Kiểm tra xem giờ, phút, giây đó có hợp lệ hay không? In kết quả ra màn hình.\nViết chương trình nhập vào ngày, tháng, năm hợp lệ. Cho biết năm này có phải là năm nhuận hay không? In kết quả ra màn hình.\nViết chương trình tính diện tích và chu vi các hình: tam giác, hình vuông, hình chữ nhật và hình tròn với những thông tin cần được nhập từ bàn phím.\nViết chương trình tính tiền cước TAXI. Biết rằng:\n\nkm đầu tiên giá là 5000đ\n200m tiếp theo là 1000đ.\nNếu lớn hơn 30km thì mỗi km thêm sẽ là 3000đ\n\nHãy nhập số km sau đó in ra số tiền phải trả.\nNhập vào 3 số nguyên dương a,b,c. Kiểm tra xem 3 số đó có lập thành tam giác không? Nếu có hãy cho biết tam giác đó thuộc loại nào? (cân, vuông, đều, …).\nViết chương trình nhập vào số nguyên dương n. Kiểm tra xem n có phải là số chính phương hay không? (số chính phương là số khi lấy căn bặc 2 có kết quả là nguyên).\n\n\n\nCấu trúc lặp\n\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 18;\n    for (int i = 1; i &lt;= a; i++) {\n        if (a % i == 0) {\n            cout &lt;&lt; \"\\t\" &lt;&lt; i;\n        }\n    }\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    for (int i = 0; i &lt; 5; i++)\n    {\n        for (int j = 0; j &lt;= i; j++) {\n            cout &lt;&lt; j &lt;&lt; \"\\t\";\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int i = 10, s = 0;\n    while (i &gt; 0)\n    {\n        if (i % 2 == 0) {\n            s += i;\n        }\n        else {\n            if (i &gt; 5) {\n                s += 2 * i;\n            }\n        }\n        i--;\n    }\n    cout &lt;&lt; \"s = \" &lt;&lt; s;\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 18, i = 1;\n    do {\n        if (a % i == 0) {\n            cout &lt;&lt; \"\\t\" &lt;&lt; i;\n        }\n        i++;\n    } while (i &lt;= a);\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 11, b = 16, i = a;\n    while (i &lt; b)\n    {\n        if (i % 2 == 0)\n        {\n            cout &lt;&lt; \"\\t\" &lt;&lt; i;\n            break;\n        }\n        i++;\n    }\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int a = 10, s = 0, i = 0;\n    while (i &lt; a)\n    {\n        i++;\n        if (i % 2 == 0) {\n            continue;\n        }\n        else {\n            s = s + i;\n        }\n    }\n    cout &lt;&lt; \"s=\" &lt;&lt; s;\n    return 0;\n}\nCho biết kết quả của đọan chương trình sau:\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    int i = 1, s = 0;\n    while (true)\n    {\n        s = s + i++;\n        if (i % 2) {\n            i = i + 2;\n        }\n        else {\n            i = i + 1;\n        }\n        if (i &gt; 20) break;\n    }\n    cout &lt;&lt; s;\n    return 0;\n}\nViết chương trình in ra màn hình hình chữ nhật đặc kích thước m\\times n. Ví dụ: Nhập m=5,n=4\n* * * * \n* * * * \n* * * * \n* * * * \n* * * *\nViết chương trình in ra màn hình hình chữ nhật rỗng kích thước m\\times n. Ví dụ: Nhập m=5,n=4\n* * * * \n*     * \n*     * \n*     * \n* * * *\nViết chương trình in ra màn hình tam giác vuông cân đặc có độ cao h. Ví dụ: Nhập h=4\n* \n* * \n* * * \n* * * * \nViết chương trình in ra màn hình tam giác cân rỗng có độ cao h. Ví dụ: Nhập h=4\n* \n* * \n*   * \n* * * * \nViết chương trình in ra màn hình tam giác cân đặc có độ cao h. Ví dụ: Nhập h=4\n      *\n    * * *\n  * * * * *\n* * * * * * * \nViết chương trình in ra màn hình tam giác cân rỗng có độ cao h. Ví dụ: Nhập h=4\n      *\n    *   *\n  *       *\n* * * * * * *\nViết chương trình nhập số nguyên dương n. Liệt kê n số nguyên tố đầu tiên.\nViết chương trình nhập vào hai số nguyên dương a và b. Tìm ước số chung lớn nhất và bội số chung nhỏ nhất của a và b.\nViết chương trình nhập vào một số nguyên n gồm tối đa 10 chữ số (4 bytes). In ra màn hình giá trị nhị phân của số trên.\nViết chương trình đếm số ước số của số nguyên dương n. Ví dụ: n=12 số ước số của 12 là 6\nMột số hoàn thiện là một số có tổng các ước số của nó (không kể nó) bằng chính nó. Hãy liệt kê các số hoàn thiện nhỏ hơn 5000. Ví dụ: số 6 là số hòan thiện vì tổng các ước số là 1+2+3=6.\nNhập vào ngày, tháng, năm. Cho biết đó là ngày thứ mấy trong năm.\nIn ra dãy số Fibo f_{n} f_{n}=\\begin{cases}\n1 & n=1\\\\\n1 & n=2\\\\\nf_{n-1}+f_{n-2} & n&gt;2\n\\end{cases}\n\n\n\nBài tập luyện tập và nâng cao\n\nCài đặt tất cả các lưu đồ đã vẽ ở chương 1.\nNhập vào ngày, tháng, năm. Kiểm tra xem ngày, tháng, năm đó có hợp lệ hay không, nếu hợp lệ cho biết ngày sau đó là bao nhiêu. Ví dụ: Nhập 31/12/2003 Ngày sau đó 01/01/2004\nNhập vào ngày, tháng, năm. Kiểm tra xem ngày, tháng, năm đó có hợp lệ hay không, nếu hợp lệ cho biết ngày trước đó là bao nhiêu. Ví dụ: Nhập 01/01/2003 Ngày trước đó 31/12/2002\n(*) Nhập vào ngày, tháng, năm của năm 2003. Hãy kiểm tra xem dữ liệu có hợp lệ hay không? Nếu hợp lệ hãy cho biết đó là ngày thứ mấy trong tuần. (hai, ba, tư, …, CN).(Hướng dẫn: lấy ngày 01 tháng 01 năm 2003 là ngày thứ tư làm mốc).\nNhập vào giờ, phút, giây. Kiểm tra xem giờ, phút, giây đó có hợp lệ hay không, nếu hợp lệ cho biết giờ sau đó 1 giây là bao nhiêu. Ví dụ: Nhập 01:59:59 Giờ sau đó 1 giây 02:00:00\nNhập vào giờ, phút, giây. Kiểm tra xem giờ, phút, giây đó có hợp lệ hay không, nếu hợp lệ cho biết giờ trước đó 1 giây là bao nhiêu. Ví dụ: Nhập 02:00:00 Giờ trước đó 1 giây 01:59:59\nViết chương trình in ra bảng cửu chương từ 2 đến 9.\n(*) Vẽ hình cánh quạt sau với h là chiều dài cánh quạt. Ví dụ h=4\n*     * * * *\n* *   * * *    \n* * * * *\n* * * * * * *\n    * * * * * \n  * * *   * *\n* * * *     *",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN</span>"
    ]
  },
  {
    "objectID": "chapter-3-cpp.html#tóm-tắt",
    "href": "chapter-3-cpp.html#tóm-tắt",
    "title": "3  KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN",
    "section": "3.3 TÓM TẮT",
    "text": "3.3 TÓM TẮT\nCấu trúc tuần tự, lặp và rẽ nhánh (lựa chọn) là ba cấu trúc chính hình thành nên chương trình. Dựa vào những cấu trúc điều khiển này ta có thể xây dựng thành những chương trình phức tạp hơn. Vì vậy phải nắm rõ cách hoạt động của những cấu trúc điều khiển này để cài đặt đúng yêu cầu bài toán. Khi sử dụng phải lưu ý điều kiện thực hiện hay kết thúc của một thao tác nào đó. Bên trong một phát biểu điều khiển phải là một lệnh hay một khối lệnh (khối lệnh được đặt bên trong cặp dấu ngoặc {}). Những biến không phụ thuộc vào vòng lặp nên đặt bên ngoài vòng lặp. Khi sử dụng cấu trúc điều khiển lồng nhau phải lưu ý vị trí mở ngoặc hay đóng ngoặc cho hợp lý.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>KIỂU DỮ LIỆU CƠ BẢN VÀ CẤU TRÚC ĐIỀU KHIỂN</span>"
    ]
  },
  {
    "objectID": "chapter-4-cpp.html",
    "href": "chapter-4-cpp.html",
    "title": "4  HÀM",
    "section": "",
    "text": "4.1 LÝ THUYẾT\nChương này trình bày cấu trúc của một chương trình, các bước xây dựng cài đặt chương trình theo phương pháp thủ tục hàm và một số kỹ thuật liên quan.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>HÀM</span>"
    ]
  },
  {
    "objectID": "chapter-4-cpp.html#lý-thuyết",
    "href": "chapter-4-cpp.html#lý-thuyết",
    "title": "4  HÀM",
    "section": "",
    "text": "Khái niệm\nHàm là một đoạn chương trình độc lập thực hiện trọn vẹn một công việc nhất định sau đó trả về giá trị cho chương trình gọi nó, hay nói cách khác hàm là sự chia nhỏ của chương trình. Hàm được sử dụng khi:\n\nCó một công việc giống nhau cần thực hiện ở nhiều lúc khác nhau.\nKhi cần chia một chương trình lớn phức tạp thành các chương trình nhỏ để dễ quản lý việc tính toán và giải quyết vấn đề cũng như dễ hiểu.\n\n\nMột chương trình có sử dụng hàm đơn giản\n// Khai báo thư viện\n#include &lt;iostream&gt;\n\n// Khai báo hàm (nguyên mẫu hàm)\nfloat LuyThua(float x, int n);\n\n// Hàm chính\nint main()\n{\n    float x, y;\n    int n;\n    std::cout &lt;&lt; \"Nhap x va n =\";\n    std::cin &gt;&gt; x &gt;&gt; n;\n    y = LuyThua(x, n);\n    // In kết quả ra màn hình (tùy chọn)\n    std::cout &lt;&lt; \"Ket qua: \" &lt;&lt; y &lt;&lt; std::endl;\n    return 0;\n}\n\n// Cài đặt (định nghĩa) hàm\nfloat LuyThua(float x, int n)\n{\n    float y = 1;\n    for(int i = 1; i &lt;= n; i++)\n        y = y * x;\n    return y;\n}\n\n\n\nCấu trúc một chương trình C++\n\nPhần khai báo\nBao gồm các:\n\nKhai báo thư viện sử dụng\nKhai báo hằng số\nKhai báo kiểu dữ liệu tự định nghĩa\nKhai báo các biến toàn cục\nKhai báo các hàm hay nguyên mẫu hàm\n\n\n\nHàm chính main\nThực hiện các công việc và các lời gọi hàm cần thiết.\n\n\nCác hàm\nThực hiện các công việc xác định.\n\n\n\nCách xây dựng một hàm con\n\nKhai báo hàm\n\n⟨Kiểu dữ liệu trả về của hàm⟩ ⟨Tên hàm⟩(⟨danh sách các tham số⟩);\nLưu ý: tham số trong nguyên mẫu hàm có thể bỏ phần tên.\n\n\n\nCài đặt hàm\n\n⟨Kiểu dữ liệu trả về của hàm⟩ ⟨Tên hàm⟩(⟨danh sách các tham số⟩)\n{\n    ⟨các câu lệnh⟩\n}\n\n\n\nGọi hay thực thi hàm\n\n⟨Tên hàm⟩(⟨danh sách các tham số được truyền⟩);\n\nCó 3 cách truyền tham số:\n\nTruyền bằng giá trị\n\nTham số gọi là tham trị.\nTruyền đối số cho hàm ở dạng giá trị.\nCó thể truyền hằng, biến, biểu thức.\nĐược sử dụng khi không có nhu cầu thay đổi giá trị của tham số sau khi thực hiện hàm.\n\nvoid Ham(int x)\n{\n    // ...\n    int y = x;\n    // ...\n}\n\nint main()\n{\n    int a, b;\n    // ...\n    Ham(3);\n    Ham(a);\n    Ham(a + b);\n    // ...\n    return 0;\n}\nTruyền bằng địa chỉ\n\nTham số gọi là tham trỏ.\nTruyền đối số cho hàm ở dạng địa chỉ (con trỏ).\nChỉ truyền đối số là biến.\nĐược sử dụng khi có nhu cầu thay đổi hoặc nhận giá trị của đối số sau khi thực hiện hàm.\n\nvoid Ham(int *x)\n{\n    // ...\n    int y = *x;\n    // ...\n}\n\nint main()\n{\n    int a;\n    // ...\n    Ham(&a);\n    // ...\n    return 0;\n}\nTruyền bằng tham chiếu\n\nTham số gọi là tham biến.\nTruyền đối số cho hàm ở dạng tham chiếu.\nChỉ truyền đối số là biến.\nĐược sử dụng khi có nhu cầu thay đổi hoặc nhận giá trị của đối số sau khi thực hiện hàm.\n\nvoid Ham(int &x)\n{\n    // ...\n    int y = x;\n    // ...\n}\n\nint main()\n{\n    int a;\n    // ...\n    Ham(a);\n    // ...\n    return 0;\n}\n\n\n\nXác định kiểu dữ liệu trả về của hàm\nXác định dựa vào đầu ra của hàm. Gồm 2 loại:\n\nHàm không trả về giá trị: Những hàm loại này thường rơi vào những nhóm chức năng: nhập/xuất dữ liệu, thống kê, sắp xếp, liệt kê.\n\nvoid ⟨Tên hàm⟩(⟨danh sách các tham số⟩)\n{\n    ⟨Khai báo các biến cục bộ⟩\n    ⟨Các câu lệnh hay lời gọi hàm⟩\n}\n\nHàm trả về kiểu dữ liệu cơ bản hay kiểu dữ liệu có cấu trúc: Kiểu dữ liệu tùy theo mục đích của hàm cần trả về giá trị gì thông qua việc phân tích bài toán. Những hàm loại này thường được sử dụng trong các trường hợp: Đếm, kiểm tra, tìm kiếm, tính trung bình, tổng, tích, …\n\n⟨Kiểu dữ liệu⟩ ⟨Tên hàm⟩(⟨danh sách các tham số⟩)\n{\n    ⟨Kiểu dữ liệu⟩ kq;\n    ⟨Khai báo các biến cục bộ⟩\n    ⟨Các câu lệnh hay lời gọi hàm⟩\n    return kq;\n}\n\n\nĐối với những hàm trả về nhiều loại giá trị cho từng trường hợp cụ thể (chẳng hạn như kiểm tra: đúng hay sai, so sánh: bằng, lớn hơn hay nhỏ hơn, …) thì cần ghi chú rõ giá trị trả về là gì cho từng trường hợp đó.\n\n\nXác định tham số\nXác định dựa vào đầu vào của hàm. Lưu ý:\n\nTham số dạng tham trị: Không thay đổi hoặc không cần lấy giá trị mới của tham số sau lời gọi hàm. Tham số dạng này chỉ mang ý nghĩa là dữ liệu đầu vào.\nTham số dạng tham trỏ và tham biến: Có sự thay đổi giá trị của tham số trong quá trình thực hiện và cần lấy lại giá trị đó sau khi ra khỏi hàm. Ứng dụng của tham số loại này có thể là dữ liệu đầu ra (kết quả) hoặc cũng có thể vừa là dữ liệu đầu vào vừa là dữ liệu đầu ra.\n\n\n\nXác định biến cục bộ\nLà các đại lượng trung gian được sử dụng trong hàm.\n\n\nXác định tên hàm\nĐặt tên theo quy ước đặt tên trong C++ sao cho tên gọi đúng với chức năng hay mục đích thực hiện của hàm và gợi nhớ.\n\n\nCác ví dụ\n\nViết hàm in ra màn hình các ước số của n.\nPhân tích hàm:\n\nInput: n là số nguyên dương\nOutput: không có\nCông việc: In ra các ước số của số của n\n\n#include &lt;iostream&gt;\n\nvoid LietKeUocSo(unsigned int n)\n{\n    for(int i = 1; i &lt;= n; i++)\n        if(n % i == 0)\n            std::cout &lt;&lt; i &lt;&lt; \"\\t\";\n}\n\n\nViết hàm tính tổng S(n)=1+2+3+\\ldots+n, với n là số nguyên dương.\nPhân tích bài toán:\n\nInput: n là số nguyên dương\nOutput: S là tổng của 1+2+3+...+n\nCông việc: Tính tổng S\n\nunsigned int TongS(unsigned int n)\n{\n    unsigned int S = 0;\n    int i = 1;\n    while(i &lt;= n)\n    {\n        S += i;\n        i++;\n    }\n    return S;\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>HÀM</span>"
    ]
  },
  {
    "objectID": "chapter-4-cpp.html#bài-tập",
    "href": "chapter-4-cpp.html#bài-tập",
    "title": "4  HÀM",
    "section": "4.2 BÀI TẬP",
    "text": "4.2 BÀI TẬP\n\nBài tập cơ bản\n\nCài đặt lại tất cả các bài tập ở chương 2 theo phương pháp hàm.\nViết chương trình tính diện tích và chu vi của hình chữ nhật với chiều dài và chiều rộng được nhập từ bàn phím.\nViết chương trình tính diện tích và chu vi hình tròn với bán kính được nhập từ bàn phím.\nNhập số nguyên dương n. Liệt kê tất cả các số nguyên tố nhỏ hơn n.\nNhập số nguyên dương n. Liệt kê n số chính phương đầu tiên.\nNhập số nguyên dương n. Đếm xem có bao nhiêu số hoàn thiện nhỏ hơn n.\nNhập số nguyên dương n (0&lt;n&lt;1000) và in ra cách đọc của n. Ví dụ: Nhập n = 105. In ra màn hình: mot tram le nam.\nViết chương trình tính tiền thuê máy dịch vụ Internet và in ra màn hình kết quả. Với dữ liệu nhập vào là giờ bắt đầu thuê (GBD), giờ kết thúc thuê (GKT), số máy thuê (SoMay).\n\nĐiều kiện cho dữ liệu nhập: 6\\leq GBD &lt; GKT \\leq 21. Giờ là số nguyên.\nĐơn giá: 2500đ cho mỗi giờ máy trước 17:30 và 3000đ cho mỗi giờ máy sau 17:30.\n\nViết chương trình tính tiền lương ngày cho công nhân, cho biết trước giờ vào ca, giờ ra ca của mỗi người. Giả sử rằng:\n\nTiền trả cho mỗi giờ trước 12 giờ là 6000đ và sau 12 giờ là 7500đ.\nGiờ vào ca sớm nhất là 6 giờ sáng và giờ ra ca trễ nhất là 18 giờ (Giả sử giờ nhập vào nguyên).\n\nNhập vào 2 số nguyên p,q và tính biểu thức sau: \\left(-\\frac{q}{2}+\\left(\\frac{p^{3}}{27}+\\frac{q^{2}}{4}\\right)^{\\frac{1}{2}}\\right)^{\\frac{1}{3}}+\\left(-\\frac{q}{2}-\\left(\\frac{p^{3}}{27}+\\frac{q^{2}}{4}\\right)^{\\frac{1}{2}}\\right)^{\\frac{1}{3}}\nNhập vào 3 số thực a,b,c và kiểm tra xem chúng có thành lập thành 3 cạnh của một tam giác hay không? Nếu có hãy tính diện tích, chiều dài mỗi đường cao của tam giác và in kết quả ra màn hình.\n\nCông thức tính diện tích s=\\sqrt{(p*(p-a)*(p-b)*(p-c))} với p là nữa chu vi của tam giác\nCông thức tính các đường cao: h_{a}=\\frac{2s}{a},h_{b}=\\frac{2s}{b},h_{c}=\\frac{2s}{c}\n\nNhập vào 6 số thực a,b,c,d,e,f. Giải hệ phương trình sau: \\left\\{ \\begin{array}{l}\nax+by=c\\\\\ndx+ey=f\n\\end{array}\\right.\nViết chương trình nhập 2 số nguyên dương a,b. Tìm USCLN và BSCNN của hai số nguyên đó.\nViết chương trình tính tổng nghịch đảo của n giai thừa.\nCho 2 số nguyên a,b. Viết hàm hoán vị giá trị 2 số trên.\n(*) Viết chương trình nhập số nguyên dương n gồm 5 chữ số, kiểm tra xem các chữ số n có phải là số đối xứng hay không. Ví dụ: Đối xứng: 13531 Không đối xứng: 13921\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, đếm xem n có bao nhiêu chữ số chẵn và bao nhiêu chữ số lẻ.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, đếm xem n có bao nhiêu chữ số là số nguyên tố.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, tính tổng các ước số dương của n. Ví dụ, nhập n=6 Tổng các ước số từ 1 đến n: 1+2+3+6=12.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, tìm ước số lẻ lớn nhất của n. Ví dụ: Ước số lẻ lớn nhất của 27 là 9.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, kiểm tra xem các chữ số của n có toàn lẻ hay toàn chẵn không.\n(*) Viết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, sắp xếp các chữ số của n theo thứ tự tăng dần. Ví dụ: Nhập n=1536 Kết quả sau khi sắp xếp: 1356.\n\n\n\nBài tập luyện tập và nâng cao\n\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, sau đó nhập một số nguyên x, tìm vị trí xuất hiện của chữ số có giá trị x trong n. Ví dụ: Nhập n=1526, x=2 Kết quả: Chu so 2 o vi tri thu 3.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, kiểm tra xem các chữ số của n có được sắp thứ tự không. Ví dụ, nhập n=1569 hoặc n=8521 thì kết quả là có thứ tự.\nViết chương trình nhập 2 số a,b sao cho: số lớn nhất trong 2 số phải là một số dương và chia hết cho 7. Nếu nhập sai phải yêu cầu nhập lại cho đến khi đúng.\nViết chương trình nhập số nguyên dương n gồm k chữ số, k\\leq5, tính giá trị trung bình các chữ số chẵn trong n.\n(*) Viết chương trình in ra màn hình ngày/tháng/năm của ngày hiện tại, cho phép sử dụng các phím mũi tên lên, xuống để tăng hoặc giảm một ngày.\n(*) Viết chương trình in ra màn hình giờ:phút:giây hiện tại, cho phép sử dụng các phím mũi tên lên, xuống để tăng hoặc giảm một giây.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>HÀM</span>"
    ]
  },
  {
    "objectID": "chapter-4-cpp.html#tóm-tắt",
    "href": "chapter-4-cpp.html#tóm-tắt",
    "title": "4  HÀM",
    "section": "4.3 TÓM TẮT",
    "text": "4.3 TÓM TẮT\nTrước khi xây dựng một hàm ta phải xác định mục đích của hàm là dùng để làm gì, trên cơ sở đó, ta mới xác định được các thành phần của hàm và xây dựng nguyên mẫu hàm. Mỗi hàm phải thực hiện một chức năng độc lập và tách biệt với các hàm khác (không được lồng nhau). Đối với hàm có giá trị trả về phải lưu ý kiểu dữ liệu phải tương ứng kiểu dữ liệu cả giá trị trả về và kiểu dữ liệu của biến được gán khi gọi hàm. Trường hợp hàm trả về từ hai loại giá trị trở lên thì phải có dòng chú thích cho trường hợp tương ứng để khi gọi hàm biết được kết quả (chẳng hạn như tìm kiếm, kiểm tra, so sánh,.v.v giá trị trả về có 2 trường hợp: có hoặc không có phần tử cần tìm, thỏa điều kiện kiểm tra hay không? Do vậy ta phải quy ước giá trị cho từng trường hợp). Nên đặt tên hàm sao cho gợi nhớ được chức năng, đặt tên theo quy tắc nhất định để tránh việc gọi sai tên hàm do lẫn lộn giữa ký tự hoa và thường, có dấu gạch nối giữa các từ trong hàm hay không? Khi gọi hàm phải truyền đủ tham số, đúng kiểu dữ liệu và đúng thứ tự của tham số.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>HÀM</span>"
    ]
  }
]